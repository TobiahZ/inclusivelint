#!/usr/bin/env bash

declare -A ERROR_TERMINOLOGIES
declare -A WARNING_TERMINOLOGIES
declare contraventionFound=false
declare SOFTWARE_VERSION

ERROR_TERMINOLOGIES["black\s?list"]="The term 'blacklist' was detected, consider other terms such as 'blocklist' instead."
ERROR_TERMINOLOGIES["white\s?list"]="The term 'whitelist' was detected, consider other terms such as 'allowlist' instead."
ERROR_TERMINOLOGIES["slave"]="The term 'slave' was detected, consider other terms such as 'secondary' instead."

WARNING_TERMINOLOGIES["master"]="The term 'master' was detected, maybe another terminology should be considered."

function create_dictionary() {
    while read line; do
        key="$(cut -d'=' -f1 <<<"$line")"
        value="$(cut -d'=' -f2 <<<"$line")"
        if [[ ! $key == *" "* ]]; then
            WARNING_TERMINOLOGIES[$key]="The term $key was detected, consider other terms such as $value instead."
        fi
    done < <( cat parsers/outputRelation.txt )
}

function get_version() {
    SOFTWARE_VERSION="v0.0.1"
}

function is_image() {
    imageExtensions=(".gif" ".jpeg" ".svg" ".png" ".jpg")
    fileName="$1"

    for extension in ${imageExtensions[@]}; do
        if [[ $fileName == *$extension ]]; then
            return 0
        fi
    done

    return 1
}

function find_error_contraventions() {
    file="$1"
    if is_image $file; then
        return
    fi

    fileName=$(basename -- "$file")
    pattern=${2}
    contraventions=$(egrep -iHnr "$pattern" "$file" | cut -d : -f2)

    for contravention in $contraventions; do
        if ! [[ -z $contravention ]]; then
            printError "[Error] "$file" (line $contravention): ${ERROR_TERMINOLOGIES[$pattern]}"
            contraventionFound=true
        fi
    done
}

function find_warning_contraventions() {
    file="$1"
    if is_image $file; then
        return
    fi

    fileName=$(basename -- "$file")
    pattern=${2}
    contraventions=$(egrep -iHnrw "$pattern" "$file" | cut -d : -f2)

    for contravention in $contraventions; do
        if ! [[ -z $contravention ]]; then
            printWarning "[Warning] "$file" (line $contravention): ${WARNING_TERMINOLOGIES[$pattern]}"
        fi
    done
}

function printInfo() {
    red=`tput setaf 1`
    green=`tput setaf 2`
    reset=`tput sgr0`
    echo "${green}${*}${reset}"
}

function printError() {
    red=`tput setaf 1`
    reset=`tput sgr0`
    echo "${red}${*}${reset}"
}

function printWarning() {
    yellow=`tput setaf 3`
    reset=`tput sgr0`
    echo "${yellow}${*}${reset}"
}

function find_contraventions_from_git_repo() {
    pushd "$directory" > /dev/null

    branchName=$(git rev-parse --abbrev-ref HEAD)
    files=$(git ls-tree -r $branchName --name-only)

    # Save current IFS and split to array
    SAVEIFS=$IFS
    IFS=$'\n'
    files=($files)
    IFS=$SAVEIFS

    for (( i=0; i<${#files[@]}; i++ ))
    do
        for pattern in "${!ERROR_TERMINOLOGIES[@]}"; do
            find_error_contraventions "${files[$i]}" $pattern
        done
    done

    for (( i=0; i<${#files[@]}; i++ ))
    do
        for pattern in "${!WARNING_TERMINOLOGIES[@]}"; do
            find_warning_contraventions "${files[$i]}" $pattern
        done
    done

    popd > /dev/null
}

function find_contraventions() {
    files=$(find "$directory" -type f -print)

    for file in "$files"; do
        for pattern in "${!ERROR_TERMINOLOGIES[@]}"; do
            find_error_contraventions "$file" $pattern
        done
    done;

    for file in "$files"; do
        if ! [[ -d "$file" && ! -L "$file" ]]; then
            for pattern in "${!WARNING_TERMINOLOGIES[@]}"; do
                find_warning_contraventions "$file" $pattern
            done
        fi;
    done
}

get_version
create_dictionary
directory="${1}"

while getopts v option
do
    case "${option}"
    in
    v)
        echo $SOFTWARE_VERSION
        exit 0
        ;;
    *) 
        echo "Invalid argument. Use for example -v for version"
        exit 1
        ;;
    esac
done

# Check if the directory is a git repository
if [ $(find "$directory" -name ".git") ]; then
    find_contraventions_from_git_repo
else
    find_contraventions
fi

if $contraventionFound ; then 
    exit 1
else
    printInfo "No non-inclusive terminologies found"
fi
